package com.example.caloriecalc.fragments

import android.os.Build
import android.os.Bundle
import android.util.Log
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.ImageView
import android.widget.ProgressBar
import androidx.annotation.RequiresApi
import androidx.lifecycle.ViewModelProvider
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.example.caloriecalc.adapters.DaysAdapter
import com.example.caloriecalc.R
import com.example.caloriecalc.adapters.MealAdapter
import com.example.caloriecalc.data.CalendarDay
import com.example.caloriecalc.data.DiaryViewModel
import com.example.caloriecalc.data.Meal
import com.example.caloriecalc.data.Product
import com.google.android.material.datepicker.MaterialDatePicker
import java.time.DayOfWeek
import java.time.Instant
import java.time.LocalDate
import java.time.ZoneId

class DiaryFragment : Fragment() {
    private  lateinit var viewModel: DiaryViewModel
    private lateinit var recyclerView: RecyclerView
    private lateinit var daysAdapter: DaysAdapter
    private lateinit var recyclerViewMeals: RecyclerView
    private lateinit var mealAdapter: MealAdapter
    private lateinit var progressBar: ProgressBar
    private val cachedWeek = mutableMapOf<LocalDate, Map<String, List<Product>>>()
    private val meals = mutableListOf( // –î–æ–±–∞–≤–ª—è–µ–º meals –≤ –ø–æ–ª–µ –∫–ª–∞—Å—Å–∞, —á—Ç–æ–±—ã –∫ –Ω–µ–º—É –º–æ–∂–Ω–æ –±—ã–ª–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è
        Meal("–ó–∞–≤—Ç—Ä–∞–∫"),
        Meal("–û–±–µ–¥"),
        Meal("–£–∂–∏–Ω"),
        Meal("–ü–µ—Ä–µ–∫—É—Å")
    )

    @RequiresApi(Build.VERSION_CODES.TIRAMISU)
    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        val view = inflater.inflate(R.layout.fragment_diary, container, false)
        viewModel = ViewModelProvider(requireActivity()).get(DiaryViewModel::class.java)
        recyclerView = view.findViewById(R.id.recyclerViewDays)
        recyclerViewMeals = view.findViewById(R.id.recyclerViewMeals)
        progressBar = view.findViewById(R.id.progressBar)

        view.findViewById<ImageView>(R.id.btn_calendar).setOnClickListener {
            showDatePicker()
        }

        setupRecyclerView()
        setupMealsRecyclerView()
        loadCurrentWeek()

        viewModel.isLoading.observe(viewLifecycleOwner) { isLoading ->
            progressBar.visibility = if (isLoading) View.VISIBLE else View.GONE
            // –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å UI –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
            recyclerView.isEnabled = !isLoading
            recyclerViewMeals.isEnabled = !isLoading
        }

        viewModel.foodData.observe(viewLifecycleOwner) { foodData ->
            val currentDate = viewModel.selectedDate.value ?: LocalDate.now()
            val mealsData = viewModel.getFoodForDate(currentDate)
            updateMealsForDate(currentDate, mealsData)
        }

        viewModel.selectedDate.observe(viewLifecycleOwner) { date ->
            daysAdapter.currentSelectedDate = date

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ ViewModel
            val meals = viewModel.getMealsForDate(date)
            updateMealsForDate(date, meals)
        }

        viewModel.loadInitialWeekData()


        val openSearchButton: ImageView = view.findViewById(R.id.search_button)
        openSearchButton.setOnClickListener {
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –ø–æ–∏—Å–∫–∞ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π
            parentFragmentManager.beginTransaction()
                .replace(R.id.fragment_container, SearchProductFragment()) // –ú–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç
                .addToBackStack(null) // –î–æ–±–∞–≤–ª—è–µ–º –≤ backstack –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
                .commit()
        }

        parentFragmentManager.setFragmentResultListener("product_added", this) { _, bundle ->
            val mealName = bundle.getString("meal_name")
            val newProduct = bundle.getParcelable("new_product", Product::class.java)


            if (mealName != null && newProduct != null) {
                val selectedDate = daysAdapter.currentSelectedDate ?: LocalDate.now()
                viewModel.addProduct(selectedDate, mealName, newProduct)
            }
        }

        return view
    }

    private fun showDatePicker() {
        val datePicker = MaterialDatePicker.Builder.datePicker()
            .setTitleText("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É")
            .setSelection(MaterialDatePicker.todayInUtcMilliseconds())
            .build()

        datePicker.addOnPositiveButtonClickListener { selectedDate ->
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –≤ LocalDate
            val date = Instant.ofEpochMilli(selectedDate)
                .atZone(ZoneId.systemDefault())
                .toLocalDate()

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
            viewModel.setSelectedDate(date)

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
            viewModel.loadDataForDate(date)

            // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–µ–¥–µ–ª—é –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
            updateCalendarWeek(date)
        }

        datePicker.show(parentFragmentManager, "DATE_PICKER")
    }

    private fun updateCalendarWeek(selectedDate: LocalDate) {
        val startDate = selectedDate.with(DayOfWeek.MONDAY)
        val endDate = startDate.plusDays(6)

        val weekDates = mutableListOf<LocalDate>()
        var currentDate = startDate
        while (currentDate <= endDate) {
            weekDates.add(currentDate)
            currentDate = currentDate.plusDays(1)
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥–∞–ø—Ç–µ—Ä —Å –Ω–æ–≤—ã–º–∏ –¥–∞—Ç–∞–º–∏
        val updatedDays = weekDates.map { date ->
            CalendarDay(date, date.isEqual(LocalDate.now()))
        }
        daysAdapter.submitList(updatedDays)

        // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        daysAdapter.currentSelectedDate = selectedDate
        daysAdapter.notifyDataSetChanged()
    }

    private fun updateMealsForDate(date: LocalDate, mealsData: Map<String, List<Product>>) {
        meals.forEach { meal ->
            meal.products.clear()
            meal.products.addAll(mealsData[meal.name] ?: emptyList())
        }
        mealAdapter.notifyDataSetChanged()
    }

    private fun setupRecyclerView() {
        daysAdapter = DaysAdapter (
            onDaySelected = { selectedDay ->
           Log.d("DiaryFragment", "Day selected: ${selectedDay.date}")
        },
        onDateSelected = { date ->
            viewModel.setSelectedDate(date)

        }
    )
        recyclerView.apply {
            layoutManager = LinearLayoutManager(requireContext(), RecyclerView.HORIZONTAL, false)
            adapter = daysAdapter
        }

        val today = LocalDate.now()
        daysAdapter.currentSelectedDate = today
        viewModel.setSelectedDate(today)
    }

    private fun setupMealsRecyclerView() {
        mealAdapter = MealAdapter(meals) { selectedMeal ->
            val bundle = Bundle().apply {
                putString("meal_name", selectedMeal.name)
            }
            val searchFragment = SearchProductFragment()
            searchFragment.arguments = bundle

            parentFragmentManager.beginTransaction()
                .replace(R.id.fragment_container, searchFragment)
                .addToBackStack(null)
                .commit()
        }

        recyclerViewMeals.layoutManager = LinearLayoutManager(requireContext())
        recyclerViewMeals.adapter = mealAdapter
        recyclerViewMeals.isNestedScrollingEnabled = true

    }

    // üî• –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –Ω—É–∂–Ω—ã–π Meal
    private fun addProductToMeal(mealName: String, newProduct: Product) {
        val meal = meals.find { it.name == mealName }
        meal?.let {
            it.products.add(newProduct) // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –≤ –ø—Ä–∏—ë–º –ø–∏—â–∏

            // üî• –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º–∞—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–ª–æ—Ä–∏–π –∏ –ë–ñ–£
            it.getTotalCalories()
            it.getTotalProtein()
            it.getTotalFat()
            it.getTotalCarbs()

            mealAdapter.notifyDataSetChanged() // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º RecyclerView
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
    private fun loadCurrentWeek() {
        val today = LocalDate.now()
        val currentWeek = mutableListOf<LocalDate>()

        for (i in 0..6) {
            val currentDate = today.with(DayOfWeek.MONDAY).plusDays(i.toLong())
            currentWeek.add(currentDate)
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π, –≤—ã–¥–µ–ª—è—è —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
        updateDays(currentWeek)
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–Ω–µ–π
    private fun updateDays(days: List<LocalDate>) {
        val today = LocalDate.now()  // –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
        val updatedDays = days.map { date ->
            val isToday = date.isEqual(today)
            CalendarDay(date, isToday)
        }
        daysAdapter.submitList(updatedDays)
    }

    override fun onResume() {
        super.onResume()
        viewModel.selectedDate.value?.let { currentDate ->
            daysAdapter.currentSelectedDate = currentDate
            daysAdapter.notifyDataSetChanged()
        }
    }

}
